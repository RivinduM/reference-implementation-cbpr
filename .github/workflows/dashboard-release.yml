name: Build and Release SWIFT Dashboard

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'dashboard/**'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        default: ''
        type: string

env:
  NODE_VERSION: '20'
  DASHBOARD_PATH: 'dashboard/swift_dashboard'

jobs:
  build-dashboard:
    name: Build Dashboard Plugin
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Clone OpenSearch Dashboards
        run: |
          echo "Cloning OpenSearch Dashboards repository..."
          git clone https://github.com/opensearch-project/OpenSearch-Dashboards.git
          cd OpenSearch-Dashboards
          echo "Staying on main branch for compatibility"
          
      - name: Bootstrap OpenSearch Dashboards
        run: |
          cd OpenSearch-Dashboards
          echo "Running yarn osd bootstrap..."
          yarn osd bootstrap
          
      - name: Copy Dashboard Plugin to Plugins Directory
        run: |
          echo "Copying swift_dashboard to OpenSearch Dashboards plugins directory..."
          cp -r ${{ env.DASHBOARD_PATH }} OpenSearch-Dashboards/plugins/swift_dashboard
          
      - name: Install Plugin Dependencies and Build
        run: |
          cd OpenSearch-Dashboards/plugins/swift_dashboard
          echo "Installing plugin dependencies..."
          yarn install
          
          echo "Building plugin..."
          yarn build
          
          # Verify build output
          echo "Checking build directory contents:"
          ls -la build/ || echo "Build directory not found"
          
          # Check if any swiftDashboard zip file exists
          if ls build/swiftDashboard-*.zip 1> /dev/null 2>&1; then
            echo "✅ Dashboard plugin built successfully"
            PLUGIN_ZIP=$(ls build/swiftDashboard-*.zip | head -1)
            echo "Found plugin: $PLUGIN_ZIP"
          else
            echo "❌ Dashboard plugin build failed - no zip file found"
            exit 1
          fi
        id: build_plugin
        
      - name: Get Version Info
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract version from tag
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
          elif [[ "${{ github.event.inputs.release_tag }}" != "" ]]; then
            # Use provided tag
            TAG="${{ github.event.inputs.release_tag }}"
            VERSION=${TAG#v}
          else
            # Use version from package.json + commit hash
            cd ${{ env.DASHBOARD_PATH }}
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            COMMIT_HASH=$(git rev-parse --short HEAD)
            VERSION="${PACKAGE_VERSION}-${COMMIT_HASH}"
            TAG="v${VERSION}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          echo "Tag: ${TAG}"
          
      - name: Prepare Release Artifacts
        run: |
          # Copy the built plugin to release directory
          mkdir -p release
          cd OpenSearch-Dashboards/plugins/swift_dashboard/build
          
          # Find the built plugin zip
          PLUGIN_ZIP=$(find . -name "swiftDashboard-*.zip" | head -1)
          if [[ -n "$PLUGIN_ZIP" ]]; then
            cp "$PLUGIN_ZIP" $GITHUB_WORKSPACE/release/swift-dashboard-${{ steps.get_version.outputs.version }}.zip
            
            # Generate checksums
            cd $GITHUB_WORKSPACE/release
            sha256sum swift-dashboard-${{ steps.get_version.outputs.version }}.zip > checksums.txt
            
            echo "Release artifacts prepared:"
            ls -la
          else
            echo "❌ No plugin zip found in build directory"
            exit 1
          fi

      - name: Upload Dashboard Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: swift-dashboard-plugin-${{ steps.get_version.outputs.version }}
          path: |
            release/swift-dashboard-${{ steps.get_version.outputs.version }}.zip
            release/checksums.txt
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-dashboard
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}
          path: release/
          
      - name: Extract for Scanning
        run: |
          cd release
          tar -xzf swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.tar.gz
          
      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'release/swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-dashboard, security-scan]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Dashboard Artifacts
        uses: actions/download-artifact@v4
        with:
          name: swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}
          path: release/
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Create release notes
          cat > release_notes.md << 'EOF'
          ## SWIFT Dashboard Plugin Release ${{ needs.build-dashboard.outputs.version }}
          
          ### 📊 Features
          - **Real-time Monitoring**: Live message processing statistics and status
          - **Message Analytics**: Transaction volume analysis and success rates
          - **Error Analysis**: Categorized error reporting with drill-down capabilities
          - **Currency Insights**: Transaction breakdown by currency with trending
          - **Performance Metrics**: Processing times, throughput, and performance analysis
          - **Advanced Search**: Full-text search across all message content
          - **Visual Reports**: Interactive charts, graphs, and trend analysis
          - **Role-based Access**: Federated authentication with OIDC support
          
          ### 🚀 Quick Installation
          
          #### Option 1: Automated Setup (Linux/macOS)
          ```bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${{ needs.build-dashboard.outputs.tag }}/swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.tar.gz
          tar -xzf swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.tar.gz
          cd swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}
          
          # Run automated installer
          ./install-dashboard.sh
          ```
          
          #### Option 2: Manual Installation
          ```bash
          # Install into existing OpenSearch Dashboards
          cd /path/to/opensearch-dashboards
          bin/opensearch-dashboards-plugin install file:///path/to/swiftDashboard-2.19.0.zip
          
          # Restart OpenSearch Dashboards
          sudo systemctl restart opensearch-dashboards
          ```
          
          #### Option 3: Docker Deployment
          ```bash
          # Extract and run Docker stack
          tar -xzf swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.tar.gz
          cd swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}
          docker-compose up -d
          
          # Access dashboard at http://localhost:5601/app/swiftDashboard
          ```
          
          ### ⚙️ System Requirements
          
          - **OpenSearch**: Version 2.19.0 or higher
          - **OpenSearch Dashboards**: Version 2.19.0 or higher
          - **Java**: 17+ (for OpenSearch runtime)
          - **RAM**: Minimum 4GB for stable operation
          - **Storage**: 1GB+ for indices and logs
          
          ### 🔧 Configuration
          
          The dashboard automatically creates the required index mapping for `swift_messages` and includes:
          
          - Pre-configured visualizations for message analytics
          - Error analysis dashboards with categorization
          - Currency and transaction monitoring
          - Performance metrics and trending
          - Advanced search capabilities
          
          ### 🔐 Authentication Options
          
          - **OpenSearch Internal**: Native authentication with role-based access
          - **OIDC Integration**: Supports Asgardeo and other identity providers
          - **SAML 2.0**: Enterprise SSO integration
          - **LDAP/Active Directory**: Corporate directory integration
          
          ### 🛠️ Integration with SWIFT Translator
          
          This dashboard works seamlessly with the [SWIFT MT/MX Translator](https://github.com/${{ github.repository }}/releases/latest) to provide:
          
          - Real-time monitoring of translation processes
          - Error analysis and troubleshooting
          - Performance optimization insights
          - Historical transaction analysis
          
          ### 📚 Documentation & Support
          
          - **📖 Setup Guide**: [Dashboard Documentation](https://github.com/${{ github.repository }}/blob/main/dashboard/README.md)
          - **🔧 Translator Integration**: [FTP/SFTP Guide](https://github.com/${{ github.repository }}/blob/main/translator/integrations/ftp-sftp/README.md)
          - **🐛 Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
          - **💬 Support**: [GitHub Discussions](https://github.com/${{ github.repository }}/discussions)
          
          ### 🔍 What's New
          
          - ✅ **Production Ready**: Fully tested plugin with automated deployment
          - ✅ **Security Scanned**: Vulnerability scanning with Trivy integration
          - ✅ **Docker Support**: Complete Docker Compose setup included
          - ✅ **Auto Installation**: One-command setup script for Linux/macOS
          - ✅ **Enhanced Documentation**: Comprehensive setup and troubleshooting guides
          
          ### 💾 Download Assets
          
          | File | Description |
          |------|-------------|
          | `swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.tar.gz` | Complete package with installer (Linux/macOS) |
          | `swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.zip` | Cross-platform package |
          
          ---
          **Build Information**
          - **Version**: ${{ needs.build-dashboard.outputs.version }}
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - **Workflow**: [Build #${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **OpenSearch Compatibility**: 2.19.0+
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-dashboard.outputs.tag }}
          name: "SWIFT Dashboard Plugin ${{ needs.build-dashboard.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.build-dashboard.outputs.version, '-') }}
          files: |
            release/swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.tar.gz
            release/swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.zip
            release/swift-dashboard-plugin-${{ needs.build-dashboard.outputs.version }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Latest Release Info
        if: ${{ !contains(needs.build-dashboard.outputs.version, '-') }}
        run: |
          echo "✅ Released dashboard version ${{ needs.build-dashboard.outputs.version }} as latest"
          echo "📁 Dashboard artifacts uploaded successfully"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-dashboard.outputs.tag }}"

  version-bump:
    name: Bump Version After Release
    runs-on: ubuntu-latest
    needs: [build-dashboard, release]
    if: needs.release.result == 'success' && !contains(needs.build-dashboard.outputs.version, '-')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Calculate Next Version
        id: next_version
        run: |
          CURRENT_VERSION="${{ needs.build-dashboard.outputs.version }}"
          echo "Current version: $CURRENT_VERSION"
          
          # Parse semantic version (MAJOR.MINOR.PATCH)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment patch version for next development cycle
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}"
          
          echo "Next version: $NEXT_VERSION"
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          
      - name: Update Package.json Version
        run: |
          cd ${{ env.DASHBOARD_PATH }}
          
          # Update version in package.json
          sed -i 's/"version": "[^"]*"/"version": "${{ steps.next_version.outputs.next_version }}"/' package.json
          
          echo "Updated package.json version to ${{ steps.next_version.outputs.next_version }}"
          
          # Verify the change
          grep '"version"' package.json
          
      - name: Commit and Push Version Bump
        run: |
          git add ${{ env.DASHBOARD_PATH }}/package.json
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "chore(dashboard): bump version to ${{ steps.next_version.outputs.next_version }} after release ${{ needs.build-dashboard.outputs.version }}

          - Automatic version bump after successful dashboard release
          - Prepares for next development cycle
          - Previous release: ${{ needs.build-dashboard.outputs.tag }}"
          
          git push origin main
          
          echo "✅ Dashboard version bumped to ${{ steps.next_version.outputs.next_version }}"

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build-dashboard, release, version-bump]
    if: always() && needs.build-dashboard.result == 'success'
    
    steps:
      - name: Notify Success
        if: needs.release.result == 'success'
        run: |
          echo "🎉 Successfully released SWIFT Dashboard Plugin ${{ needs.build-dashboard.outputs.version }}"
          echo "📦 Download: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-dashboard.outputs.tag }}"
          
          if [[ "${{ needs.version-bump.result }}" == "success" ]]; then
            echo "🔢 Version automatically bumped for next development cycle"
          elif [[ "${{ needs.version-bump.result }}" == "skipped" ]]; then
            echo "⏭️ Version bump skipped (pre-release or manual trigger)"
          else
            echo "⚠️ Version bump failed - may need manual intervention"
          fi
          
      - name: Notify Build Only
        if: needs.release.result == 'skipped'
        run: |
          echo "✅ Dashboard build completed successfully for version ${{ needs.build-dashboard.outputs.version }}"
          echo "💡 To create a release, push a version tag (v1.0.0) or use workflow_dispatch with create_release=true"
